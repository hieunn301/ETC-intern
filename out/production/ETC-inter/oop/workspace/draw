package oop.workspace;

import java.util.LinkedList;

class Stack{
    private String arr[];
    private int top;
    private int max;
    Stack(int size){
        arr = new String[size];
        max = size;
        top = -1;
    }
    public int size() {
        return top + 1;
    }
    public boolean isEmpty() {
        return top == -1;
    }
    public boolean isFull() {
        return top == max - 1;
    }
    public String push(String x){
        if (isFull()){
            System.out.println("Ngăn xếp đầy");
        }
        System.out.println("Thêm " + x);
        return arr[++top] = x;
    }
    public String pop(){
        if (isEmpty()){
            System.out.println("Ngăn xếp rỗng");
        }
        System.out.println("Xóa " + peek());
        return arr[top--];
    }
    public String peek(){
        if (!isEmpty()) {
            return arr[top];
        }else {
            System.out.println("Ngăn xếp rỗng");
        }
        return null;
    }
}

class Queue {
    private String[] arr;
    private int front;
    private int rear;
    private int max;
    private int count;

    Queue(int size){
        arr = new String[size];
        max = size;
        front = 0;
        rear = -1;
        count = 0;
    }
    public int count() {return count;}

    public boolean isEmpty() {return front == 0;}

    public boolean isFull() {return count == max ? true : false;}

    public String add(String item){
        if (isFull()){
            System.out.println("Hàng đợi đầy");
        }
        System.out.println("Thêm " + item);
        rear++;
        arr[rear] = item;
        count++;
        return item;
    }
    public String remove() {
        if (isEmpty()) {
            System.out.println("Hàng đợi rỗng");
        }
        String x = arr[front];
        System.out.println("Xóa " + x);
        front++;
        count--;
        return x;
    }
    public String peek(){
        if (isEmpty()) {
            System.out.println("Hàng đợi rỗng");
        }
        return arr[front];
    }
}

//class CustomHashMap<K, V> {
//
//    private int capacity = 16;
//
//    private Entry<K, V>[] table;
//
//    public CustomHashMap(){
//        table = new Entry[capacity];
//    }
//    public CustomHashMap(int capacity){
//        this.capacity = capacity;
//        table = new Entry[capacity];
//    }
//    public void put(K key, V value){
//    }
//    public V get(K key){
//    }
//    public void remove(K key){
//    }
//    public void display(){
//        for(int i = 0; i < capacity; i++){
//            if(table[i] != null){
//                Entry<K, V> currentNode = table[i];
//                while (currentNode != null){
//                    System.out.println(String.format("Key is %s and value is %s", currentNode.getKey(), currentNode.getValue()));
//                    currentNode = currentNode.getNext();
//                }
//            }
//        }
//    }
//    private int index(K key){
//        if(key == null){
//            return 0;
//        }
//        return Math.abs(key.hashCode() % capacity);
//    }
//}

